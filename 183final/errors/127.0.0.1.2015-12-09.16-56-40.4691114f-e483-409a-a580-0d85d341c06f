(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'brd_name'"
p3
sS'layer'
p4
S'C:\\Users\\bryant\\Desktop\\web2py_src\\web2py\\applications\\start1\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\nfrom datetime import datetime\nimport json\n\ndef index():\n    """\n    Displays all the boards and allows the user to login/register to edit/create messages/boards.\n    """\n    logger.info("Session: %r" % session)\n\n    q = (db.boards.id > 0)\n    # Dict for generating board list\n    boards = db(q).select(orderby=~db.boards.brd_time)\n\n    user_id = auth.user_id\n\n    return dict(boards=boards, user_id=user_id)\n\n\n@auth.requires_login()\ndef add_board():\n    db.boards.update_or_insert((db.boards.id == request.vars.id),\n            creator = auth.user_id,\n            brd_name = request.vars.brd_name,\n            brd_desc = request.vars.brd_desc,\n            brd_time = datetime.utcnow())\n    return "ok"\n\n\ndef load_boards():\n    """Loads all boards"""\n    q = (db.boards.id > 0)\n    # Dict for generating board list\n    rows = db(q).select(orderby=~db.boards.brd_time)\n    d = []\n    for r in rows:\n        d.append({\n            \'id\': r.id,\n            \'creator\': r.creator,\n            \'creator_name\': get_user_from_id(r.creator),\n            \'brd_time\': r.brd_time,\n            \'brd_name\': r.brd_name,\n            \'brd_desc\': r.brd_desc,\n            \'message_num\': get_num_messages(r),\n            \'message_num_today\': get_board_message_today_count(r)\n        })\n    brd_len = len(d)\n    return response.json(dict(brd_dict=d, brd_len=brd_len))\n\n\n@auth.requires_signature()\ndef delete_board():\n    logger.info("Deleting board %r", (db.boards(request.args(0)).id))\n    # Remove the board\n    db(db.boards.id == request.args(0)).delete()\n    # Remove all messages in regards to the board\n    db(db.messages.msg_brd == request.args(0)).delete()\n    redirect(request.env.http_referer)\n    return\n\n\n@auth.requires_signature()\ndef delete_boards():\n    board_ids = request.vars[\'boards[]\']\n    if board_ids:\n        if isinstance(board_ids, list):\n            for id in board_ids:\n                logger.info("Deleting message %r", (id))\n                # Remove the board\n                db(db.boards.id == id).delete()\n                # Remove all messages in regards to the board\n                db(db.messages.msg_brd == id).delete()\n            return "ok"\n        else:\n            # Remove the board\n            db(db.boards.id == board_ids).delete()\n            # Remove all messages in regards to the board\n            db(db.messages.msg_brd == board_ids).delete()\n            return "ok"\n    else:\n        session.flash = "Error deleting post!"\n        return ""\n\n@auth.requires_signature()\ndef delete_messages():\n    message_ids = request.vars[\'messages[]\']\n    if message_ids:\n        if isinstance(message_ids, list):\n            for id in message_ids:\n                logger.info("Deleting message %r", (id))\n                # Remove the message\n                db(db.messages.id == id).delete()\n            return "ok"\n        else:\n            # Remove the board\n            db(db.messages.id == message_ids).delete()\n            return "ok"\n    else:\n        session.flash = "Error deleting message!"\n        return ""\n\ndef create_post():\n    back_button = A(\'Go back\', _class="btn btn-default", _href=URL(\'default\', \'boards\'))\n    form = SQLFORM(db.posts, fields=[\'title\', \'description\', \'image\'])\n    if form.process().accepted:\n        redirect(URL(\'boards\'))\n    return dict(form=form, back_button=back_button)\n\n@auth.requires_signature()\ndef delete_message():\n    logger.info("Deleting message %r", (db.messages(request.args(0)).id))\n    # Remove the message\n    db(db.messages.id == request.args(0)).delete()\n    redirect(request.env.http_referer)\n    return\n\n\n@auth.requires_login()\ndef add_message():\n    db.messages.update_or_insert((db.messages.id == request.vars.id),\n            creator = auth.user_id,\n            msg_title = request.vars.msg_title,\n            msg_id = request.vars.msg_desc,\n            msg_time = datetime.utcnow(),\n            msg_brd = request.vars.msg_brd)\n    return "ok"\n\n\ndef boards():\n    """This page enables you to view/edit the contents of a board."""\n    # grab messages pertaining to the board\n    messages = db(db.messages.msg_brd == request.args(0)).select()\n    title = db.boards(request.args(0)).brd_name\n    subtitle = db.boards(request.args(0)).brd_desc\n\n    id = request.args(0)\n    totalmessages = len(messages)\n\n    return dict(id=id, totalmessages=totalmessages, title=title, subtitle=subtitle)\n\n\ndef load_messages():\n    """Loads all messages in the current board"""\n    board_id = request.args(0)\n    messages = db(db.messages.msg_brd == board_id).select()\n    title = db.boards(board_id).brd_name\n    subtitle = db.boards(board_id).brd_desc\n\n    if isinstance(request.vars.page, str):\n        page = int(request.vars.page)\n    else:\n        page = 0\n\n    items_per_page = 4\n    limitby = (page * items_per_page, (page + 1) * items_per_page)\n    rows = db(db.messages.msg_brd == request.args(0)).select(db.messages.ALL, limitby=limitby, orderby=~db.messages.msg_time)\n\n    d = []\n    for r in rows:\n        d.append({\n            \'id\': r.id,\n            \'creator\': r.creator,\n            \'creator_name\': get_user_from_id(r.creator),\n            \'msg_time\': r.msg_time,\n            \'image\': r.image,\n            \'msg_title\': r.msg_title,\n            \'msg_id\': r.msg_id\n        })\n    msg_len = len(d)\n    totalmessages = len(messages)\n    logger.info("User %r, has requested %r messages from %r" % (auth.user_id, msg_len, title))\n    return response.json(dict(user_id=auth.user_id, msg_dict=d, msg_len=msg_len, page=page, totalmessages=totalmessages, items_per_page=items_per_page))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(boards)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\bryant\\Desktop\\web2py_src\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\bryant\\Desktop\\web2py_src\\web2py\\applications\\start1\\controllers/default.py", line 214, in <module>\n  File "C:\\Users\\bryant\\Desktop\\web2py_src\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\bryant\\Desktop\\web2py_src\\web2py\\applications\\start1\\controllers/default.py", line 135, in boards\n    title = db.boards(request.args(0)).brd_name\nAttributeError: \'NoneType\' object has no attribute \'brd_name\'\n'
p11
s.